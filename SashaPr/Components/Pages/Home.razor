@page "/"
@rendermode InteractiveServer
@* <PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app. *@

@using SashaPr.Models
@using SashaPr.Data
@using Microsoft.EntityFrameworkCore
@using System.Linq

<h3>Список книг</h3>

<div class="input-group mb-3">
    <input type="text" class="form-control" @bind="searchTerm" placeholder="Поиск">
    <div class="input-group-append">
        <button class="btn btn-primary" @onclick="FilterBooks">Поиск</button>
    </div>
</div>

@if (books != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Изображение</th>
                <th>Название</th>
                <th>Автор</th>
                <th>Год публикации</th>
                <th>Действия</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in filteredBooks)
            {
                <tr>
                    <td>
                        @if (item.Picture != null)
                        {
                            <img src="@($"data:image/png;base64,{Convert.ToBase64String(item.Picture)}")" alt="Изображение книги" style="max-width: 100px;" />
                        }
                        else
                        {
                            <span>No Image</span>
                        }
                    </td>
                    @* <td>
                        <a href="@($"book/{item.Id}")">@item.Title</a>
                    </td> *@
                    <td>@item.Title</td>
                    <td>@item.Author</td>
                    <td>@item.YearOfPub</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => BuyBook(item)">Купить</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>Список книг пуст</p>
}

@code {
    private List<DBModelBook> books;
    private List<DBModelBook> filteredBooks;
    private string searchTerm;

    [Inject]
    private SashaPrContext _context { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadBooks();
    }

    private async Task LoadBooks()
    {
        books = await _context.DBModelBook.ToListAsync();
        filteredBooks = books;
    }

    private async Task BuyBook(DBModelBook book)
    {
        _context.Remove(book);
        await _context.SaveChangesAsync();
        await LoadBooks();
    }

    private void FilterBooks()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredBooks = books;
        }
        else
        {
            string lowerSearchTerm = searchTerm.ToLower();
            filteredBooks = books.Where(b =>
                b.Title.ToLower().Contains(lowerSearchTerm) ||
                b.Author.ToLower().Contains(lowerSearchTerm) ||
                b.YearOfPub.ToString().Contains(searchTerm)
            ).ToList();
        }
    }
}
